{"ast":null,"code":"var _jsxFileName = \"X:\\\\gectorai-web\\\\src\\\\chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\"; // Assuming styles are here\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]); // Chat messages\n  const [input, setInput] = useState(\"\"); // User input\n  const [isLoading, setIsLoading] = useState(false); // Loading state for AI response\n\n  const sendMessage = async () => {\n    if (!input.trim()) return; // Skip empty messages\n\n    // Add user's message to the chat\n    const userMessage = {\n      sender: \"user\",\n      text: input\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\"); // Clear input\n    setIsLoading(true);\n    try {\n      // Call your AI API (replace the URL with your backend endpoint)\n      const response = await axios.post(\"/api/chat\", {\n        message: input\n      });\n\n      // Add AI's response to the chat\n      const aiMessage = {\n        sender: \"ai\",\n        text: response.data.reply\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    } catch (error) {\n      console.error(\"Error fetching AI response:\", error);\n      setMessages(prev => [...prev, {\n        sender: \"ai\",\n        text: \"Sorry, something went wrong!\"\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-bar\",\n      children: \"Chat with AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender === \"user\" ? \"user\" : \"ai\"}`,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message ai\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Chat, \"OjPvdQps2GsUGE4SUl5r1IcLShE=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","_s","messages","setMessages","input","setInput","isLoading","setIsLoading","sendMessage","trim","userMessage","sender","text","prev","response","post","message","aiMessage","data","reply","error","console","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["X:/gectorai-web/src/chat.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\"; // Assuming styles are here\r\n\r\nconst Chat = () => {\r\n  const [messages, setMessages] = useState([]); // Chat messages\r\n  const [input, setInput] = useState(\"\"); // User input\r\n  const [isLoading, setIsLoading] = useState(false); // Loading state for AI response\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return; // Skip empty messages\r\n\r\n    // Add user's message to the chat\r\n    const userMessage = { sender: \"user\", text: input };\r\n    setMessages((prev) => [...prev, userMessage]);\r\n    setInput(\"\"); // Clear input\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // Call your AI API (replace the URL with your backend endpoint)\r\n      const response = await axios.post(\"/api/chat\", { message: input });\r\n\r\n      // Add AI's response to the chat\r\n      const aiMessage = { sender: \"ai\", text: response.data.reply };\r\n      setMessages((prev) => [...prev, aiMessage]);\r\n    } catch (error) {\r\n      console.error(\"Error fetching AI response:\", error);\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { sender: \"ai\", text: \"Sorry, something went wrong!\" },\r\n      ]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Top Bar outside the container */}\r\n      <div className=\"top-bar\">\r\n        Chat with AI\r\n      </div>\r\n\r\n      {/* Chat Box Container */}\r\n      <div className=\"chat-container\">\r\n        <div className=\"chat-box\">\r\n          {messages.map((msg, index) => (\r\n            <div\r\n              key={index}\r\n              className={`message ${msg.sender === \"user\" ? \"user\" : \"ai\"}`}\r\n            >\r\n              <p>{msg.text}</p>\r\n            </div>\r\n          ))}\r\n          {isLoading && (\r\n            <div className=\"message ai\">\r\n              <p>...</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Chat Input */}\r\n        <div className=\"chat-input\">\r\n          <input\r\n            type=\"text\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder=\"Type your message...\"\r\n          />\r\n          <button onClick={sendMessage}>Send</button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}